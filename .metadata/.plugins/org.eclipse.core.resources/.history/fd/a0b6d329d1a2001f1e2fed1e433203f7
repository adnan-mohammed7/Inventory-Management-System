package application.utility;

import javafx.scene.control.TextField;

public class Validate {
	public static int validateIntger(String str){
		try {
			return Integer.parseInt(str);
		}catch(NumberFormatException e) {
			return -1;
		}
	}
	
	public static double validateDouble(String str){
		try {
			return Double.parseDouble(str);
		}catch(NumberFormatException e) {
			return -1;
		}
	}
	
	public static boolean validateValues(int inv, int min, int max) {
		if(inv < 0 || min < 0 || max < 0) {
			return false;
		}
		if (inv < min || inv > max) {
			return false;
		}
		if(min > max) {
			return false;
		}
		return true;
	}
	
	public static boolean emptyFields(TextField name, TextField inv, TextField price, TextField max, TextField min, TextField machineCompany) {
		if (name.getText().isBlank()) {
			return false;
		}else if(inv.getText().isBlank()) {
			return false;
		}else if(price.getText().isBlank()) {
			return false;
		}else if(max.getText().isBlank()) {
			return false;
		}else if(min.getText().isBlank()) {
			return false;
		}else if(machineCompany.getText().isBlank()) {
			return false;
		}
		return true;
	}
	
	public static boolean validateFields(TextField name, TextField inv, TextField price, TextField max, TextField min, TextField machineCompany, boolean check) {
		if(!emptyFields(name, inv, price, max, min, machineCompany)) {
			return false;
		}
		
		if(validateDouble(price.getText()) == -1) {
			return false;
		}
		
		if(!validateValues(validateIntger(inv.getText()), validateIntger(min.getText()), 
				validateIntger(max.getText()))) {
			return false;
		}
		
		if (check && validateDouble(machineCompany.getText())) {
			
		}
		
		return true;
	}
}
