package application.utility;

import application.abstractClasses.Part;
import application.models.InHouse;
import application.models.Outsourced;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;

public class Validate {
	public static int validateInteger(String str){
		try {
			return Integer.parseInt(str);
		}catch(NumberFormatException e) {
			return -1;
		}
	}
	
	public static double validateDouble(String str){
		try {
			return Double.parseDouble(str);
		}catch(NumberFormatException e) {
			return -1;
		}
	}
	
	public static boolean validateValues(int inv, int min, int max) {
		if(inv < 0 || min < 0 || max < 0 || inv < min || inv > max || min > max) {
			return false;
		}
		return true;
	}
	
	public static boolean emptyFields(TextField name, TextField inv, TextField price, TextField max, TextField min, TextField machineCompany) {
		if (name.getText().isBlank() ||
				inv.getText().isBlank() ||
				price.getText().isBlank() ||
				max.getText().isBlank() ||
				min.getText().isBlank() ||
				machineCompany.getText().isBlank()) {
			return false;
		}
		return true;
	}
	
	public static boolean validateFields(TextField name, TextField inv, TextField price, TextField max, TextField min, TextField machineCompany, boolean check) {
		if(!emptyFields(name, inv, price, max, min, machineCompany)) {
			
			return false;
		}
		
		if(validateDouble(price.getText()) == -1) {
			return false;
		}
		
		if(!validateValues(validateInteger(inv.getText()), validateInteger(min.getText()), 
				validateInteger(max.getText()))) {
			return false;
		}
		
		if (check && (validateInteger(machineCompany.getText())) == -1) {
			return false;
		}
		
		return true;
	}
	
	public static Part getPart(TextField name, TextField inv, TextField price, TextField max, TextField min, TextField machineCompany, boolean check) {
		if(check) {
			return new InHouse(name.getText(), Double.parseDouble(price.getText()),
					Integer.parseInt(inv.getText()),
					Integer.parseInt(min.getText()),
					Integer.parseInt(max.getText()),
					Integer.parseInt(machineCompany.getText()));
		}else {
			return new Outsourced(name.getText(), Double.parseDouble(price.getText()),
					Integer.parseInt(inv.getText()),
					Integer.parseInt(min.getText()),
					Integer.parseInt(max.getText()),
					machineCompany.getText());
		}
	}
	
	public static void showAlert(String msg) {
		Alert alert = new Alert(Alert.AlertType.ERROR);
		alert.setTitle("Error");
		alert.setHeaderText(null);
		alert.setContentText(msg);
	}
}
